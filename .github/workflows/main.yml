name: HLS LPDAAC Reconciliation Report

on:
  workflow_dispatch:
  release:
    types:
      - published
  push:
    branches:
      - main
    tags-ignore:
      - "*"
    paths:
      - ".github/workflows/*"
      - "cdk/**"
      - "src/**"
      - "cdk.json"
      - "Makefile"
      - "setup.py"
      - "tox.ini"
  pull_request:
    types:
      - edited
      - opened
      - reopened
      - synchronize
    branches:
      - main
    paths:
      - ".github/workflows/*"
      - "cdk/**"
      - "src/**"
      - "cdk.json"
      - "Makefile"
      - "setup.py"
      - "tox.ini"

# See https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services#updating-your-github-actions-workflow
permissions:
  id-token: write # required for requesting the JWT
  contents: read # required for actions/checkout

defaults:
  run:
    shell: bash

env:
  UV_LINK_MODE: copy
  UV_NO_PROGRESS: 1

jobs:
  unit-tests:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install tooling and dependencies
        uses: ./.github/actions/install

      - name: Run unit tests
        run: make unit-tests

  integration-tests:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Deploy integration tests stack
        uses: ./.github/actions/deploy
        with:
          aws_region: "${{ vars.AWS_DEFAULT_REGION }}"
          aws_role_to_assume_arn: "${{ vars.AWS_ROLE_TO_ASSUME_ARN }}"
          aws_role_session_name: "${{ github.actor }}"
          vars_json: "${{ toJson(vars) }}"
          secrets_json: "${{ toJson(secrets) }}"
          command: make deploy-it

      - name: Run integration tests
        run: make integration-tests

      - name: Destroy integration tests stack
        if: "${{ !cancelled() }}"
        run: make destroy-it

  deploy:
    # Deploy to Prod only on publishing a release (tag)
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Deploy production stack
        uses: ./.github/actions/deploy
        with:
          aws_region: "${{ vars.AWS_DEFAULT_REGION }}"
          aws_role_to_assume_arn: "${{ vars.AWS_ROLE_TO_ASSUME_ARN }}"
          aws_role_session_name: "${{ github.actor }}"
          vars_json: "${{ toJson(vars) }}"
          secrets_json: "${{ toJson(secrets) }}"
          command: make deploy
